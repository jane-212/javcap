name: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --generate-notes --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}

  build-release:
    name: build-release
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-musl
          - os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu

          - os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin

          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            rust: stable
            target: aarch64-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Set target variables
        shell: bash
        run: |
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        shell: bash
        run: |
          echo "target flag is: ${{ env.TARGET_FLAGS }}"

      - name: Build release binary
        shell: bash
        run: |
          cargo install cross
          cross build --verbose --release ${{ env.TARGET_FLAGS }}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bin="target/${{ matrix.target }}/release/javcap.exe"
          else
            bin="target/${{ matrix.target }}/release/javcap"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV
        env:
          VERSION: ${{ needs.create-release.outputs.version }}

      - name: Determine archive name
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          echo "ARCHIVE=javcap-$version-${{ matrix.target }}" >> $GITHUB_ENV

      - name: Creating directory for archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"
          cp "$BIN" "$ARCHIVE"/
          cp LICENSE "$ARCHIVE"/

      - name: Build archive (Windows)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          cd "$ARCHIVE" && 7z a ../"$ARCHIVE.zip" * && cd ..
          echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV

      - name: Build archive (Unix)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          cd "$ARCHIVE" && tar czf ../"$ARCHIVE.tar.gz" * && cd ..
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "$version" ${{ env.ASSET }}
